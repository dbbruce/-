1、NoSQL（Not Only SQL）,不仅仅是SQL，这类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展；

2、3v
    海量 volume
    多样 variety
    实时 velocity

3、3高
    高并发
    高可扩
    高性能

4、BSON一种类json的二进制形式的存储格式，简称binary json；支持内嵌的文档对象和数组对象；

5、NoSQL模型，聚合模型
    1、 KV键值
    2、 Bson：
    3、 列簇：是按列存储数据的，最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或某几列的查询有非常大的IO优势。
    4、 图形：人际关系，用行、列表示很费力，用图关系表示；

6、NoSQL数据库分类：
    1.键值（key-value） redis
        应用场景：内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等。
        数据模型：Key指向Value的键值对，通常用hashtable来实现
        优点：查找速度块
        缺点：数据无结构化，通常只被当作字符串或二进制数据
    2.列存储数据库 HBase（列簇）
        应用场景：分布式文件系统
        数据模型：以列簇式存储，将同一列数据存储在一起
        优点：查找速度块，可扩展性强，更容易进行分布式扩展
        缺点：功能相对局限
    3.文档型数据库 MongoDb（Bson）
        应用场景：web应用，与Key-value类型相似，value是结构化的，不同的是数据库能够了解value的内容。
        数据类型：Key-value对应的键值对，value为结构化数据。
        优点：数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构
        缺点：查询性能不高，而且缺乏统一的查询语法
    4.图形数据库 Neo4J （图形）
        应用场景：社交网络，推荐系统等。专注于构建关系图谱。
        数据模型：图结构
        优点：利用图结构相关算法，如最短路径寻址、N度关系查询

7、传统的ACID
    A (Atomicity): 原子性
    C (Consistency): 一致性
    I (Isolation): 独立性
    D (Durability): 持久性

8、NoSQL的CAP
    C (Consistency): 强一致性，持久
    A (Availability): 可用性，高可用
    P (Partition tolerance): 分区容错性

9、CAP的3进2，一个分布式系统不可能同事满足一致性，可用性，分区容错性，最多同时满足2个；
    拆分为CA原则，CP原则，AP原则；
    CA原则：单点集群，满足一致性，可能性；扩展上不是很强大； （传统数据库就是CA）
    CP原则：满足一致性，分区容错性；但是性能不高；redis
    AP原则：满足可用性，分区容错性；可能对数据一致性要求不高；

10、分布系统中P必须出现；分区容错性是我们必须实现的；
    AP：大多数网站架构的选择
    CP：redis，mongodb

11、
