1、主从复制
    主机更新数据后，根据策略和配置，自动同步到备机的master/slave机制，Master以写为主，slave以读为主；

2、slave配置
    1、配从库不配主库
    2、从库配置，slaveof 主库IP  主库端口
    3、修改配置文件细节

3、info replication
    127.0.0.1:6379> info replication
    # Replication
    role:master   master 主
    connected_slaves:0
    master_repl_offset:0
    repl_backlog_active:0
    repl_backlog_size:1048576
    repl_backlog_first_byte_offset:0
    repl_backlog_histlen:0

3、一主二仆（从机不能写，只能读取）
    配置从机，命令行执行：
    slaveof 127.0.0.1 6379

    1、从机写数据，报错
    2、主机死了，从机依然保存slave，不会自动升级成master；
    3、主机死后，启动，依然是master，从机自动连接master；
    4、从机死后，启动，从机变为master，需要重新连接master；

4、薪火相传
    主机下挂从机1，从机1下挂从机2
    1、slaveof 127.0.0.1 6379
    2、slaveof 127.0.0.1 6380

5、反客为主
    主机挂了，从机1选出主机，从机2修改master
    1、slave1变为主机，slave1上执行：slaveof no one
    2、slave2修改跟随主机： slaveof 127.0.0.1 6380  （从6379变为6380）

6、复制原理 （首次全量，之后增量）
    slave启动成功连接到master后，发送一个sync命令
    master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，
    在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步

    1、全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中；
    2、增量复制：master继续讲新的所有收集到的修改命令依次传给slave，完成同步但是只要是重新连接master，一次完全同步将被自动执行；

7、哨兵模式（sentinel），监控主机挂了，从机选一个当主机
    1、创建一个sentinel.conf文件；
    2、编辑sentinel.conf加入下面内容：
        sentinel monitor  被监控主机名字（自己起名字） 127.0.0.1 6379 票数
        sentinel monitor host6379 127.0.0.1 6379 1
    3、启动哨兵：
        redis-sentinel /usr/common/sentinel.conf
    4、主机挂掉后，新主机选出后，旧主机重新启动后，变为slave； # 注意

8、复制的缺点
    复制的延时，slave数量越多，延迟越大；
